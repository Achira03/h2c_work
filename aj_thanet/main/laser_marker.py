import time
import cv2
import robomaster
from robomaster import robot, vision, gimbal, blaster, camera

class PIDController:
    """A simple PID controller."""
    def __init__(self, kp, ki, kd, setpoint):
        self.kp = kp
        self.ki = ki
        self.kd = kd
        self.setpoint = setpoint
        self.prev_error = 0
        self.integral = 0
        self.last_time = time.time()

    def update(self, current_value):
        """Calculates the PID control output."""
        current_time = time.time()
        dt = current_time - self.last_time
        if dt <= 0:
            return 0
        error = self.setpoint - current_value
        self.integral += error * dt
        derivative = (error - self.prev_error) / dt
        output = self.kp * error + self.ki * self.integral + self.kd * derivative
        self.prev_error = error
        self.last_time = current_time
        return output

# Global list to store processed marker objects
g_processed_markers = []

class MarkerObject:
    """A class to hold processed marker information for drawing."""
    def __init__(self, x, y, w, h, info):
        self.x = x
        self.y = y
        self.w = w
        self.h = h
        self.info = info
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏î‡∏ö‡∏ô‡∏†‡∏≤‡∏û‡∏Ç‡∏ô‡∏≤‡∏î 1280x720
        self.pt1 = (int((x - w / 2) * 1280), int((y - h / 2) * 720))
        self.pt2 = (int((x + w / 2) * 1280), int((y + h / 2) * 720))
        self.center = (int(x * 1280), int(y * 720))
        self.text = info

def on_detect_marker(marker_info):
    """Callback function that updates the global list of detected markers."""
    global g_processed_markers
    g_processed_markers.clear()
    for m in marker_info:
        g_processed_markers.append(MarkerObject(*m))

if __name__ == '__main__':
    ep_robot = robot.Robot()
    ep_robot.initialize(conn_type="ap")

    ep_robot.camera.start_video_stream(display=False, resolution=camera.STREAM_720P)
    ep_robot.vision.sub_detect_info(name="marker", callback=on_detect_marker)
    ep_robot.gimbal.recenter().wait_for_completed()

    print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Markers... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á Marker ‡∏ó‡∏±‡πâ‡∏á 3 ‡∏à‡∏∏‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á")
    # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Marker ‡∏Ñ‡∏£‡∏ö
    time.sleep(3)
    
    initial_markers = list(g_processed_markers)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Marker 3 ‡∏à‡∏∏‡∏î‡∏û‡∏≠‡∏î‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if len(initial_markers) == 3:
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö Marker ‡∏à‡∏≤‡∏Å‡∏ã‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤‡∏ï‡∏≤‡∏°‡πÅ‡∏Å‡∏ô x
        initial_markers.sort(key=lambda m: m.x)
        
        left_marker = initial_markers[0]
        center_marker = initial_markers[1]
        right_marker = initial_markers[2]
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡πÇ‡∏à‡∏ó‡∏¢‡πå
        target_sequence = [
            left_marker, 
            center_marker, 
            right_marker, 
            center_marker, 
            left_marker
        ]
        
        print(f"‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö Marker 3 ‡∏à‡∏∏‡∏î! ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á: ‡∏ã‡πâ‡∏≤‡∏¢ -> ‡∏Å‡∏•‡∏≤‡∏á -> ‡∏Ç‡∏ß‡∏≤ -> ‡∏Å‡∏•‡∏≤‡∏á -> ‡∏ã‡πâ‡∏≤‡∏¢")

        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
        for i, target_marker in enumerate(target_sequence):
            target_name = f"Marker '{target_marker.info}' (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà {i+1}/{len(target_sequence)})"
            print(f"\n--- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πá‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {target_name.upper()} ---")
            
            # ==========================================================
            # >> ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏≤‡∏¢ <<
            # ‡∏Ñ‡πà‡∏≤ PID ‡∏ó‡∏µ‡πà‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡πà‡∏á (Stability) ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
            pid_yaw = PIDController(kp=45, ki=0.02, kd=25, setpoint=0.5)
            pid_pitch = PIDController(kp=45, ki=0, kd=25, setpoint=0.5)
            
            locked = False
            # ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Ñ‡πÄ‡∏õ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
            LOCK_THRESHOLD = 0.02
            # ==========================================================

            # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡πá‡∏≠‡∏Ñ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (200 ‡∏£‡∏≠‡∏ö)
            for _ in range(500):
                img = ep_robot.camera.read_cv2_image(strategy="newest", timeout=0.5)
                
                # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏≤‡∏Å g_processed_markers
                current_target_info = next((m for m in g_processed_markers if m.info == target_marker.info), None)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ô‡πâ‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                if img is not None:
                    for marker in g_processed_markers:
                        color = (0, 0, 255) if current_target_info and marker.info == current_target_info.info else (0, 128, 0)
                        thickness = 4 if current_target_info and marker.info == current_target_info.info else 2
                        cv2.rectangle(img, marker.pt1, marker.pt2, color, thickness)
                        cv2.putText(img, marker.text, marker.center, cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)
                    
                    cv2.imshow("Robomaster Camera Feed", img)
                    cv2.waitKey(1)

                if not current_target_info:
                    ep_robot.gimbal.drive_speed(0, 0)
                    print(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ {target_name} ‡πÉ‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô...")
                    time.sleep(0.1)
                    continue

                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á Gimbal ‡∏î‡πâ‡∏ß‡∏¢ PID
                yaw_speed = -pid_yaw.update(current_target_info.x)
                pitch_speed = pid_pitch.update(current_target_info.y)
                ep_robot.gimbal.drive_speed(yaw_speed=yaw_speed, pitch_speed=pitch_speed)
                
                error_x = current_target_info.x - pid_yaw.setpoint
                error_y = current_target_info.y - pid_pitch.setpoint
                print(f"Targeting {target_name}: X_err={error_x:.3f}, Y_err={error_y:.3f}")

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
                if abs(error_x) < LOCK_THRESHOLD and abs(error_y) < LOCK_THRESHOLD:
                    print(f"‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ {target_name.upper()} ‡∏•‡πá‡∏≠‡∏Ñ‡πÅ‡∏•‡πâ‡∏ß! üí• ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á")
                    ep_robot.gimbal.drive_speed(0, 0)
                    ep_robot.blaster.fire(fire_type=blaster.INFRARED_FIRE, times=1)
                    time.sleep(2) # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡∏¢‡∏¥‡∏á
                    locked = True
                    break
                
                time.sleep(0.01)

            if not locked:
                print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πá‡∏≠‡∏Ñ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ {target_name.upper()} ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤")
                ep_robot.gimbal.drive_speed(0, 0)
                time.sleep(1)
    
    else:
        # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Marker ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 3
        print(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö Marker {len(initial_markers)} ‡∏à‡∏∏‡∏î ‡πÅ‡∏ï‡πà‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ 3 ‡∏à‡∏∏‡∏î‡∏û‡∏≠‡∏î‡∏µ")
        print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á Marker 3 ‡∏à‡∏∏‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")

    print("\n--- ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ---")
    cv2.destroyAllWindows()
    ep_robot.vision.unsub_detect_info(name="marker")
    ep_robot.camera.stop_video_stream()
    ep_robot.close()